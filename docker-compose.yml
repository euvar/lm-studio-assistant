version: '3.8'

services:
  lm-studio-assistant:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lm-studio-assistant
    environment:
      - NODE_ENV=production
      - LM_STUDIO_URL=${LM_STUDIO_URL:-http://host.docker.internal:1234/v1}
      - ENABLE_TELEMETRY=${ENABLE_TELEMETRY:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CACHE_SIZE=${CACHE_SIZE:-1000}
      - CACHE_TTL=${CACHE_TTL:-3600000}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      - CIRCUIT_BREAKER_THRESHOLD=${CIRCUIT_BREAKER_THRESHOLD:-5}
      - ENABLE_BATCHING=${ENABLE_BATCHING:-true}
      - BATCH_TIMEOUT=${BATCH_TIMEOUT:-100}
      - MAX_BATCH_SIZE=${MAX_BATCH_SIZE:-10}
    ports:
      - "${PORT:-3000}:3000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./telemetry:/app/telemetry
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lm-assistant-network
    
  # Optional: Redis for distributed caching and queue
  redis:
    image: redis:7-alpine
    container_name: lm-assistant-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - lm-assistant-network

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus
    container_name: lm-assistant-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lm-assistant-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: lm-assistant-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - lm-assistant-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  lm-assistant-network:
    driver: bridge